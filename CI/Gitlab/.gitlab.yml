image: sean1999/laravel-ci:8.2

stages:
  - setup
  - test
  - deploy

before_script:
  - source ~/.bashrc

.cache-config:
  cache:
    key:
      files:
        - package_lock.json
        - composer.lock
      prefix: install
    paths:
      - .npm/
      - vendor/
      - public/build/
      - .env
    policy: pull

.ssh-config:
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

install:
  stage: setup
  extends:
    - .cache-config
  cache:
    policy: pull-push # to allow this job to push changes on the cache
  script:
    - cp .env.ci .env
    - composer install  --prefer-dist --no-ansi --no-interaction --no-progress --no-scripts # Install Composer First before running npm run build, because filament.
    - php artisan key:generate
    - npm ci --cache .npm --prefer-offline # only install packages found in package_lock.json
    - npm run build
  interruptible: true

pint:
  stage: test
  extends:
    - .cache-config # So that we will get the cached files from the install job
  script:
    - php vendor/bin/pint --test -v
  interruptible: true
  allow_failure: true

pest:
  stage: test
  extends:
    - .cache-config # So that we will get the cached files from the install job
  services:
    - postgres:14-alpine
  variables:
    POSTGRES_DB: testing
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - cat .env
    - rm .env.testing # (Only if it exists) because we need .env.ci to be the main .env file for CI/CD
    - php artisan test --coverage --parallel 
  interruptible: true

staging:
  stage: deploy
  extends:
    - .ssh-config
  script: 
    - envoy run deploy --server=staging --cleanup --commit="$CI_COMMIT_SHA"
  environment: 
    name: staging
    url: https://example.com/
  only:
    - develop # only run on develop branch

production:
  stage: deploy
  extends:
    - .ssh-config
  script: 
    - envoy run deploy --server=prod --cleanup --no-sitemap --commit="$CI_COMMIT_SHA"
  environment: 
    name: production
    url: https://example.com/
  only:
    - main # only run on main branch